********Single table design recipe**********

1. First extract the nouns:
 # EXAMPLE USER STORY:
# (analyse only the relevant part - here, the final line).
As a music lover,
So I can organise my records,
I want to keep a list of albums' titles.
As a music lover,
So I can organise my records,
I want to keep a list of albums' release years.
Nouns:
album, title, release year

2. Infer the Table Name and Columns
Put the different nouns in this table. Replace the example with your own nouns.
Record	Properties
album	title, release year
Name of the table (always plural): albums
Column names: title, release_year


3 Decide Colum Types
Most of the time, you'll need either text, int, bigint, numeric, or boolean. If you're in doubt, do some research or ask your peers.
Remember to always have the primary key id as a first column. Its type will always be SERIAL.
# EXAMPLE:
id: SERIAL
title: text
release_year: int

4. Write the SQL
-- EXAMPLE
-- file: albums_table.sql
-- Replace the table name, columm names and types.
CREATE TABLE albums (
  id SERIAL PRIMARY KEY,
  title text,
  release_year int
);

5. Create the table
psql -h 127.0.0.1 database_name < albums_table.sql

----------------------------------------------------------------------------------------------------------------------------------------

****REPO CLASS RECIPE (ONLY USED ONCE TABLE IS DESIGNED)*********


1) Design and create the table (Refer to the above)
Table: students
Columns:
id | name | cohort_name

2) Create the SQL seeds
Your tests will depend on data stored in PostgreSQL to run.
If seed data is provided (or you already created it), you can skip this step.
-- EXAMPLE
-- (file: spec/seeds_{table_name}.sql)
-- Write your SQL seed here. 
-- First, you'd need to truncate the table - this is so our table is emptied between each test run,
-- so we can start with a fresh state.
-- (RESTART IDENTITY resets the primary key)

TRUNCATE TABLE students RESTART IDENTITY; -- replace with your own table name.
-- Below this line there should only be `INSERT` statements.
-- Replace these statements with your own seed data.
INSERT INTO students (name, cohort_name) VALUES ('David', 'April 2022');
INSERT INTO students (name, cohort_name) VALUES ('Anna', 'May 2022');

Run this SQL file on the database to truncate (empty) the table, and insert the seed data. 
Be mindful of the fact any existing records in the table will be deleted.
psql -h 127.0.0.1 your_database_name < seeds_{table_name}.sql

3) Define the class names
Usually, the Model class name will be the capitalised table name (single instead of plural).
The same name is then suffixed by Repository for the Repository class name.
# EXAMPLE
# Table name: students
# Model class
# (in lib/student.py)
class Student
# Repository class
# (in lib/student_repository.py)
class StudentRepository

4) Implement model class
Define the attributes of your Model class. You can usually map the table columns to the attributes of the class,
including primary and foreign keys.
# EXAMPLE
# Table name: students
# Model class
# (in lib/student.py)
class Student:
    def __init__(self):
        self.id = 0
        self.name = ""
        self.cohort_name = ""
        # Replace the attributes by your own columns.
# We can set the attributes to default empty values and set them later,
# here's an example:
#
# >>> student = Student()
# >>> student.name = "Will"
# >>> student.cohort_name = "September Devs"
# >>> student.name
# 'Will'
# >>> student.cohort_name
# 'September Devs'

5) Define repo class interface 
Your Repository class will need to implement methods for each "read" or "write" operation you'd like to run against the database.

Using comments, define the method signatures (arguments and return value) and what they do - write up the SQL queries that will be used by each method.

# EXAMPLE
# Table name: students
# Repository class
# (in lib/student_repository.py)
class StudentRepository():
    # Selecting all records
    # No arguments
    def all():
        # Executes the SQL query:
        # SELECT id, name, cohort_name FROM students;
        # Returns an array of Student objects.
        # Gets a single record by its ID
        # One argument: the id (number)
    def find(id):
        # Executes the SQL query:
        # SELECT id, name, cohort_name FROM students WHERE id = $1;
        # Returns a single Student object.
        # Add more methods below for each operation you'd like to implement.
    # def create(student)
    # 
    # def update(student)
    # 
    # def delete(student)
    # 

6) Write Test Examples
Write Python code that defines the expected behaviour of the Repository class, following your design from the table written in step 5.

These examples will later be encoded as Pytest tests.

# EXAMPLES

# 1
# Get all students

repo = StudentRepository()

students = repo.all()

len(students) # =>  2

students[0].id # =>  1
students[0].name # =>  'David'
students[0].cohort_name # =>  'April 2022'

students[1].id # =>  2
students[1].name # =>  'Anna'
students[1].cohort_name # =>  'May 2022'

# 2
# Get a single student

repo = StudentRepository()

student = repo.find(1)

student.id # =>  1
student.name # =>  'David'
student.cohort_name # =>  'April 2022'

# Add more examples for each method

7) Test drive each one
After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.






















